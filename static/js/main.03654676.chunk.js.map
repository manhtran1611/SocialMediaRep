{"version":3,"sources":["app/hooks.ts","api/client.js","features/notifications/notificationSlice.js","app/Navbar.tsx","features/users/usersSlice.js","features/notifications/NotificationsList.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/TimeAgo.js","features/posts/PostAuthor.js","features/posts/ReactionButtons.js","features/posts/PostList.tsx","features/posts/SinglePostPage.tsx","features/users/UserPage.js","features/users/UsersList.js","App.tsx","api/server.js","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notifications","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","fulfilled","isNew","upsertMany","payload","actions","getSelectors","selectAll","Navbar","unreadNotificationsBadge","dispatch","numUnreadNotifications","filter","n","length","className","to","onClick","usersAdapter","fetchUsers","users","usersSlice","setAll","selectAllUsers","selectUserById","selectById","NotificationsList","useEffect","renderedNotifications","map","parseISO","timeAgo","formatDistanceToNow","user","find","id","notificationClassname","classnames","new","title","postsAdapter","status","error","fetchPosts","posts","addNewPost","initialPost","postsSlice","postUpdated","content","existingPost","reactionAdded","postId","reaction","reactions","pending","rejected","addOne","postAdded","selectAllPosts","selectPostById","selectPostIds","selectIds","selectPostsByUser","createSelector","userId","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","resultAction","unwrapResult","console","usersOption","value","htmlFor","type","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","placeholder","push","TimeAgo","timestamp","timePeriod","PostAuthor","author","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","emoji","PostExcerpt","substring","PostsList","orderedPostIds","postStatus","SinglePostPage","UserPage","postTitles","UsersList","renderedUsers","App","seedDate","exact","path","render","Fragment","component","store","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","Array","db","template","nanoid","between","models","Model","hasMany","belongsTo","comment","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03654676.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { \"Content-Type\": \"application/json\" };\r\n\r\n  const config = {\r\n    method: body ? \"POST\" : \"GET\",\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  };\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body);\r\n  }\r\n\r\n  let data;\r\n  try {\r\n    const response = await window.fetch(endpoint, config);\r\n    data = await response.json();\r\n    if (response.ok) {\r\n      return data;\r\n    }\r\n    throw new Error(response.statusText);\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data);\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: \"GET\" });\r\n};\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body });\r\n};\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\n\r\nimport { client } from \"../../api/client\";\r\n\r\nconst notificationsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n});\r\n\r\nexport const fetchNotifications = createAsyncThunk(\r\n  \"notifications/fetchNotifications\",\r\n  async (_, { getState }) => {\r\n    const allNotifications = selectAllNotifications(getState());\r\n    const [latestNotification] = allNotifications;\r\n    const latestTimestamp = latestNotification ? latestNotification.date : \"\";\r\n    const response = await client.get(\r\n      `/fakeAPI/notifications?since=${latestTimestamp}`\r\n    );\r\n    return response.notifications;\r\n  }\r\n);\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: \"notifications\",\r\n  initialState: notificationsAdapter.getInitialState(),\r\n  reducers: {\r\n    allNotificationsRead(state, action) {\r\n      Object.values(state.entities).forEach((notification) => {\r\n        notification.read = true;\r\n      });\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchNotifications.fulfilled]: (state, action) => {\r\n      Object.values(state.entities).forEach((notification) => {\r\n        // Any notifications we've read are no longer new\r\n        notification.isNew = !notification.read;\r\n      });\r\n      notificationsAdapter.upsertMany(state, action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { allNotificationsRead } = notificationsSlice.actions;\r\n\r\nexport default notificationsSlice.reducer;\r\n\r\nexport const { selectAll: selectAllNotifications } =\r\n  notificationsAdapter.getSelectors((state) => state.notifications);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"./hooks\";\r\n\r\nimport {\r\n  fetchNotifications,\r\n  selectAllNotifications,\r\n} from \"../features/notifications/notificationSlice\";\r\n\r\nexport const Navbar = () => {\r\n  const dispatch = useAppDispatch();\r\n  const notifications = useAppSelector(selectAllNotifications);\r\n  const numUnreadNotifications = notifications.filter(\r\n    (n: any) => !n.read\r\n  ).length;\r\n\r\n  const fetchNewNotifications = () => {\r\n    dispatch(fetchNotifications());\r\n  };\r\n\r\n  let unreadNotificationsBadge;\r\n\r\n  if (numUnreadNotifications > 0) {\r\n    unreadNotificationsBadge = (\r\n      <span className=\"badge\">{numUnreadNotifications}</span>\r\n    );\r\n  }\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>Social Media Replicate</h1>\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <Link to=\"/\">Posts</Link>\r\n            <Link to=\"/users\">Users</Link>\r\n            <Link to=\"/notifications\">\r\n              Notifications {unreadNotificationsBadge}\r\n            </Link>\r\n            <Link to=\"/notifications\">Notifications</Link>\r\n          </div>\r\n          <button className=\"button\" onClick={fetchNewNotifications}>\r\n            Refresh Notification\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  );\r\n};\r\n","import {\r\n  createAsyncThunk,\r\n  createSlice,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst usersAdapter = createEntityAdapter();\r\n\r\nconst initialState = usersAdapter.getInitialState();\r\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\r\n  const response = await client.get(\"/fakeAPI/users\");\r\n  return response.users;\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchUsers.fulfilled]: usersAdapter.setAll,\r\n  },\r\n});\r\nexport default usersSlice.reducer;\r\n\r\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\r\n  usersAdapter.getSelectors((state) => state.users);\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { formatDistanceToNow, parseISO } from \"date-fns\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nimport {\r\n  selectAllNotifications,\r\n  allNotificationsRead,\r\n} from \"./notificationSlice\";\r\n\r\nexport const NotificationsList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const notifications = useSelector(selectAllNotifications);\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  useEffect(() => {\r\n    dispatch(allNotificationsRead());\r\n  });\r\n\r\n  const renderedNotifications = notifications.map((notification) => {\r\n    const date = parseISO(notification.date);\r\n    const timeAgo = formatDistanceToNow(date);\r\n    const user = users.find((user) => user.id === notification.user) || {\r\n      name: \"Unknown User\",\r\n    };\r\n\r\n    const notificationClassname = classnames(\"notification\", {\r\n      new: notification.isNew,\r\n    });\r\n\r\n    return (\r\n      <div key={notification.id} className={notificationClassname}>\r\n        <div>\r\n          <b>{user.name}</b> {notification.message}\r\n        </div>\r\n        <div title={notification.date}>\r\n          <i>{timeAgo} ago</i>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"notificationsList\">\r\n      <h2>Notifications</h2>\r\n      {renderedNotifications}\r\n    </section>\r\n  );\r\n};\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createSelector,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n});\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: \"idle\",\r\n  error: null,\r\n});\r\n\r\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\r\n  const response = await client.get(\"/fakeAPI/posts\");\r\n  return response.posts;\r\n});\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  \"posts/addNewPost\",\r\n  async (initialPost) => {\r\n    const response = await client.post(\"/fakeAPI/posts\", { post: initialPost });\r\n    return response.post;\r\n  }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.entities[id];\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.entities[postId];\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchPosts.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [fetchPosts.fulfilled]: (state, action) => {\r\n      state.status = \"succeeded\";\r\n      postsAdapter.upsertMany(state, action.payload);\r\n    },\r\n    [fetchPosts.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.payload;\r\n    },\r\n    [addNewPost.fulfilled]: postsAdapter.addOne,\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllPosts,\r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds,\r\n  // Pass in a selector that returns the posts slice of state\r\n} = postsAdapter.getSelectors((state) => state.posts);\r\n\r\nexport const selectPostsByUser = createSelector(\r\n  [selectAllPosts, (state, userId) => userId],\r\n  (posts, userId) => posts.filter((post) => post.user === userId)\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { unwrapResult } from \"@reduxjs/toolkit\";\r\n\r\nimport { addNewPost } from \"./postsSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\r\n\r\n  const dispatch = useAppDispatch();\r\n  const users = useAppSelector(selectAllUsers);\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n  const onAuthorChanged = (e) => setUserId(e.target.value);\r\n\r\n  const canSave =\r\n    [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\r\n\r\n  const onSavePostClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus(\"pending\");\r\n        const resultAction = await dispatch(\r\n          addNewPost({ title, content, user: userId })\r\n        );\r\n        unwrapResult(resultAction);\r\n        setTitle(\"\");\r\n        setContent(\"\");\r\n        setUserId(\"\");\r\n      } catch (err) {\r\n        console.error(\"Failed to save the post: \", err);\r\n      } finally {\r\n        setAddRequestStatus(\"idle\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const usersOption = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add A New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTile\"\r\n          name=\"postTile\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {usersOption}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button onClick={onSavePostClicked} disabled={!canSave} type=\"button\">\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { postUpdated, selectPostById } from \"./postsSlice\";\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useAppSelector((state) => selectPostById(state, postId));\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }));\r\n      history.push(`/posts/${postId}`);\r\n    }\r\n  };\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = \"\";\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n  return (\r\n    <span title={timestamp}>\r\n      <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { selectUserById } from \"../users/usersSlice\";\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useAppSelector(selectUserById);\r\n  return <span>by {author ? author.name : \"Unknown author\"}</span>;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\n\r\nimport { reactionAdded } from \"./postsSlice\";\r\nconst reactionEmoji = {\r\n  thumbsUp: \"👍\",\r\n  hooray: \"🎉\",\r\n  heart: \"❤️\",\r\n  rocket: \"🚀\",\r\n  eyes: \"👀\",\r\n};\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    );\r\n  });\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\nimport { fetchPosts, selectPostIds, selectPostById } from \"./postsSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\n\r\nlet PostExcerpt = ({ postId }: any) => {\r\n  const post = useAppSelector((state) => selectPostById(state, postId));\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.user} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n      <ReactionButtons post={post} />\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\nexport const PostsList = () => {\r\n  const dispatch = useAppDispatch();\r\n  const orderedPostIds = useAppSelector(selectPostIds);\r\n\r\n  const postStatus = useAppSelector((state) => state.posts.status);\r\n  const error = useAppSelector((state) => state.posts.error);\r\n\r\n  useEffect(() => {\r\n    if (postStatus === \"idle\") {\r\n      dispatch(fetchPosts());\r\n    }\r\n  }, [postStatus, dispatch]);\r\n\r\n  let content;\r\n\r\n  if (postStatus === \"loading\") {\r\n    content = <div className=\"loader\">Loading...</div>;\r\n  } else if (postStatus === \"succeeded\") {\r\n    // Sort posts in reverse chronological order by datetime string\r\n    content = orderedPostIds.map((postId) => (\r\n      <PostExcerpt key={postId} postId={postId} />\r\n    ));\r\n  } else if (postStatus === \"error\") {\r\n    content = <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {content}\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { selectPostById } from \"./postsSlice\";\r\nexport const SinglePostPage = ({ match }: any) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useAppSelector((state) => selectPostById(state, postId));\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    );\r\n  }\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n        <PostAuthor userId={postId} />\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { selectUserById } from \"./usersSlice\";\r\nimport { selectPostsByUser } from \"../posts/postsSlice\";\r\n\r\nexport const UserPage = ({ match }) => {\r\n  const { userId } = match.params;\r\n\r\n  const user = useAppSelector((state) => selectUserById(state, userId));\r\n\r\n  const postsForUser = useAppSelector((state) =>\r\n    selectPostsByUser(state, userId)\r\n  );\r\n\r\n  const postTitles = postsForUser.map((post) => (\r\n    <li key={post.id}>\r\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n    </li>\r\n  ));\r\n  return (\r\n    <section>\r\n      <h2>{user.name}</h2>\r\n      <ul>{postTitles}</ul>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectAllUsers } from \"./usersSlice\";\r\n\r\nexport const UsersList = () => {\r\n  const users = useAppSelector(selectAllUsers);\r\n\r\n  const renderedUsers = users.map((user) => (\r\n    <li key={user.id}>\r\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n    </li>\r\n  ));\r\n  return (\r\n    <section>\r\n      <h2>User</h2>\r\n      <ul>{renderedUsers}</ul>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { Navbar } from \"./app/Navbar\";\nimport { NotificationsList } from \"./features/notifications/NotificationsList\";\nimport { AddPostForm } from \"./features/posts/AddPostForm\";\nimport { EditPostForm } from \"./features/posts/EditPostForm\";\nimport { PostsList } from \"./features/posts/PostList\";\nimport { SinglePostPage } from \"./features/posts/SinglePostPage\";\nimport { UserPage } from \"./features/users/UserPage\";\nimport { UsersList } from \"./features/users/UsersList\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import {\r\n  Server,\r\n  Model,\r\n  Factory,\r\n  belongsTo,\r\n  hasMany,\r\n  association,\r\n  RestSerializer,\r\n} from \"miragejs\";\r\n\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nimport faker from \"faker\";\r\nimport { sentence, paragraph, article, setRandom } from \"txtgen\";\r\nimport { parseISO } from \"date-fns\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n  serializeIds: \"always\",\r\n});\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true;\r\n\r\nlet rng = seedrandom();\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem(\"randomTimestampSeed\");\r\n  let seedDate;\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString);\r\n  } else {\r\n    seedDate = new Date();\r\n    randomSeedString = seedDate.toISOString();\r\n    localStorage.setItem(\"randomTimestampSeed\", randomSeedString);\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString);\r\n  setRandom(rng);\r\n  faker.seed(seedDate.getTime());\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(rng() * (max - min + 1)) + min;\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1);\r\n  return array[index];\r\n};\r\n\r\nconst notificationTemplates = [\r\n  \"poked you\",\r\n  \"says hi!\",\r\n  `is glad we're friends`,\r\n  \"sent you a gift\",\r\n];\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = \"fakeAPI\";\r\n    // this.timing = 2000;\r\n\r\n    this.resource(\"users\");\r\n    this.resource(\"posts\");\r\n    this.resource(\"comments\");\r\n\r\n    const server = this;\r\n\r\n    this.post(\"/posts\", function (schema, req) {\r\n      const data = this.normalizedRequestAttrs();\r\n      data.date = new Date().toISOString();\r\n      // Work around some odd behavior by Mirage that's causing an extra\r\n      // user entry to be created unexpectedly when we only supply a userId.\r\n      // It really want an entire Model passed in as data.user for some reason.\r\n      const user = schema.users.find(data.userId);\r\n      data.user = user;\r\n\r\n      if (data.content === \"error\") {\r\n        throw new Error(\"Could not save the post!\");\r\n      }\r\n\r\n      const result = server.create(\"post\", data);\r\n      return result;\r\n    });\r\n\r\n    this.get(\"/posts/:postId/comments\", (schema, req) => {\r\n      const post = schema.posts.find(req.params.postId);\r\n      return post.comments;\r\n    });\r\n\r\n    this.get(\"/notifications\", (schema, req) => {\r\n      const numNotifications = getRandomInt(1, 5);\r\n\r\n      let pastDate;\r\n\r\n      const now = new Date();\r\n\r\n      if (req.queryParams.since) {\r\n        pastDate = parseISO(req.queryParams.since);\r\n      } else {\r\n        pastDate = new Date(now.valueOf());\r\n        pastDate.setMinutes(pastDate.getMinutes() - 15);\r\n      }\r\n\r\n      // Create N random notifications. We won't bother saving these\r\n      // in the DB - just generate a new batch and return them.\r\n      const notifications = [...Array(numNotifications)].map(() => {\r\n        const user = randomFromArray(schema.db.users);\r\n        const template = randomFromArray(notificationTemplates);\r\n        return {\r\n          id: nanoid(),\r\n          date: faker.date.between(pastDate, now).toISOString(),\r\n          message: template,\r\n          user: user.id,\r\n          read: false,\r\n          isNew: true,\r\n        };\r\n      });\r\n\r\n      return { notifications };\r\n    });\r\n  },\r\n  models: {\r\n    user: Model.extend({\r\n      posts: hasMany(),\r\n    }),\r\n    post: Model.extend({\r\n      user: belongsTo(),\r\n      comments: hasMany(),\r\n    }),\r\n    comment: Model.extend({\r\n      post: belongsTo(),\r\n    }),\r\n    notification: Model.extend({}),\r\n  },\r\n  factories: {\r\n    user: Factory.extend({\r\n      id() {\r\n        return nanoid();\r\n      },\r\n      firstName() {\r\n        return faker.name.firstName();\r\n      },\r\n      lastName() {\r\n        return faker.name.lastName();\r\n      },\r\n      name() {\r\n        return faker.name.findName(this.firstName, this.lastName);\r\n      },\r\n      username() {\r\n        return faker.internet.userName(this.firstName, this.lastName);\r\n      },\r\n\r\n      afterCreate(user, server) {\r\n        server.createList(\"post\", 3, { user });\r\n      },\r\n    }),\r\n    post: Factory.extend({\r\n      id() {\r\n        return nanoid();\r\n      },\r\n      title() {\r\n        return sentence();\r\n      },\r\n      date() {\r\n        return faker.date.recent(7);\r\n      },\r\n      content() {\r\n        return article(1);\r\n      },\r\n      reactions() {\r\n        return {\r\n          thumbsUp: 0,\r\n          hooray: 0,\r\n          heart: 0,\r\n          rocket: 0,\r\n          eyes: 0,\r\n        };\r\n      },\r\n      afterCreate(post, server) {\r\n        //server.createList('comment', 3, { post })\r\n      },\r\n\r\n      user: association(),\r\n    }),\r\n    comment: Factory.extend({\r\n      id() {\r\n        return nanoid();\r\n      },\r\n      date() {\r\n        return faker.date.past(2);\r\n      },\r\n      text() {\r\n        return paragraph();\r\n      },\r\n      post: association(),\r\n    }),\r\n  },\r\n  serializers: {\r\n    user: IdSerializer,\r\n    post: IdSerializer,\r\n    comment: IdSerializer,\r\n  },\r\n  seeds(server) {\r\n    server.createList(\"user\", 3);\r\n  },\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport postsReducer from \"../features/posts/postsSlice\";\r\nimport usersReducer from \"../features/users/usersSlice\";\r\nimport notificationsReducer from \"../features/notifications/notificationSlice\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    users: usersReducer,\r\n    notifications: notificationsReducer,\r\n  },\r\n});\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { fetchUsers } from \"./features/users/usersSlice\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./api/server\";\n\nstore.dispatch(fetchUsers());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}